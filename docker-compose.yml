version: '3.8'

services:
  # Database services
  mysql:
    image: mysql:8.0
    container_name: fullstack-mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: rootpassword
      MYSQL_DATABASE: fullstack_db
      MYSQL_USER: appuser
      MYSQL_PASSWORD: apppassword
    volumes:
      - mysql_data:/var/lib/mysql
      - ./docker/mysql/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - '3306:3306'
    networks:
      - fullstack-network
    healthcheck:
      test: ['CMD', 'mysqladmin', 'ping', '-h', 'localhost']
      timeout: 20s
      retries: 10

  mongodb:
    image: mongo:7.0
    container_name: fullstack-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: rootpassword
      MONGO_INITDB_DATABASE: fullstack_db
    volumes:
      - mongodb_data:/data/db
    ports:
      - '27017:27017'
    networks:
      - fullstack-network
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      timeout: 10s
      retries: 10

  redis:
    image: redis:7.2-alpine
    container_name: fullstack-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass redispassword
    volumes:
      - redis_data:/data
    ports:
      - '6379:6379'
    networks:
      - fullstack-network
    healthcheck:
      test: ['CMD', 'redis-cli', '--raw', 'incr', 'ping']
      timeout: 3s
      retries: 5

  # Application services
  backend:
    build:
      context: .
      dockerfile: apps/backend/Dockerfile
      target: production
    container_name: fullstack-backend
    restart: unless-stopped
    environment:
      NODE_ENV: production
      PORT: 3000
      MYSQL_HOST: mysql
      MYSQL_PORT: 3306
      MYSQL_USERNAME: appuser
      MYSQL_PASSWORD: apppassword
      MYSQL_DATABASE: fullstack_db
      MONGODB_URI: mongodb://root:rootpassword@mongodb:27017/fullstack_db?authSource=admin
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: redispassword
      JWT_SECRET: your-super-secret-jwt-key-change-this-in-production
      JWT_EXPIRES_IN: 7d
      BCRYPT_ROUNDS: 10
    ports:
      - '3000:3000'
    depends_on:
      mysql:
        condition: service_healthy
      mongodb:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost:3000/health']
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: .
      dockerfile: apps/frontend/Dockerfile
      target: production
    container_name: fullstack-frontend
    restart: unless-stopped
    ports:
      - '80:80'
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - fullstack-network
    healthcheck:
      test: ['CMD', 'wget', '--no-verbose', '--tries=1', '--spider', 'http://localhost/health']
      timeout: 10s
      retries: 3

volumes:
  mysql_data:
    name: fullstack_mysql_data
  mongodb_data:
    name: fullstack_mongodb_data
  redis_data:
    name: fullstack_redis_data

networks:
  fullstack-network:
    name: fullstack-network
    driver: bridge
